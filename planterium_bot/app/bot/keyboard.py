from abc import abstractmethod
from collections import namedtuple
from dataclasses import dataclass
from telebot.async_telebot import AsyncTeleBot
from telebot.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton


@dataclass(init=True)
class CommandsBase:
    """
    –ö–ª–∞—Å—Å, —Å–æ–∑–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    """
    bot: AsyncTeleBot
    commands: dict

    def gen_commands(self) -> list:
        """
        –ú–µ—Ç–æ–¥, —Å–æ–∑–¥–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞\n
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç list
        """
        commands = [BotCommand(command, description) for command, description in self.commands.items()]
        self.bot.set_my_commands(commands)
        return list(self.commands.keys())


@dataclass(init=True)
class KeyboardTitlesBase:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    main_menu_btns: namedtuple
    contacts_menu_btns: namedtuple
    catalog_menu_btns: namedtuple
    plants_menu_btns: namedtuple


@dataclass(init=True)
class KeyboardConstructor(KeyboardTitlesBase):
    """
    –ö–ª–∞—Å—Å-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Reply, Inline, ForcedReply –∏ —Ç–¥
    """

    @abstractmethod
    def gen_main_menu_markup(self):
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥. –í –∫–ª–∞—Å—Å–∞—Ö-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n
        """
        pass

    @abstractmethod
    def gen_catalog_menu_markup(self):
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥. –í –∫–ª–∞—Å—Å–∞—Ö-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞.\n
        """
        pass

    @abstractmethod
    def gen_contacts_menu_markup(self):
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥. –í –∫–ª–∞—Å—Å–∞—Ö-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n
        """
        pass

    @abstractmethod
    def gen_back_btns_markup(self, previous_lvl):
        """
        –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥. –í –∫–ª–∞—Å—Å–∞—Ö-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        """


# region ReplyKeyboardMarkup
# class ReplyKeyboardConstructor(KeyboardConstructor):
#     def __init__(
#             self,
#             # base tuples
#             main_btns: namedtuple,
#             contacts_btns: namedtuple,
#             # btn titles
#             main_btn_titles: tuple,
#             contacts_btn_title: tuple,
#     ):
#         super().__init__(main_btns, contacts_btns)
#
#     @property
#     def get_main_btns(self) -> namedtuple:
#         """
#         –ò–º–µ–Ω–æ–≤–∞–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n
#         about: "–û Planterium'e"\n
#         contacts: '–ö–æ–Ω—Ç–∞–∫—Ç—ã'\n
#         catalog: '–ö–∞—Ç–∞–ª–æ–≥'\n
#         how_to_order: '–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å'\n
#         guides: '–£—Ö–æ–¥ –∑–∞ –∑–µ–ª–µ–Ω—ã–º–∏ –ø–∏—Ç–æ–º—Ü–∞–º–∏'\n
#         discounts: '–°–∫–∏–¥–∫–∏'\n
#         discounts: '–°–∫–∏–¥–∫–∏'\n
#         sales: '–†–∞—Å–ø—Ä–æ–¥–∞–∂–∏'\n
#         back: '–ù–∞–∑–∞–¥'\n
#         :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç namedtuple
#         """
#         return self.main_menu_btns
#
#     @property
#     def get_contact_btns(self) -> namedtuple:
#         """
#         –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é —Å–≤—è–∑–∏ —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º Planterium\n
#         ig: '–ó–µ–ª–µ–Ω—ã–π Instagramüå≤'\n
#         tg: '–ó–µ–ª–µ–Ω—ã–π Telegramüåµ'\n
#         owner: '–õ–µ—à–∞, –ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–πüå¥\n
#         :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç namedtuple
#         """
#         return self.contacts_menu_btns
#
#     def gen_main_menu(self) -> ReplyKeyboardMarkup:
#         """
#         –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –º–µ–Ω—é\n
#         :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup
#         """
#         markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
#
#         main_btns = self.get_main_btns
#
#         # first row
#         first_row = [KeyboardButton(main_btns.about), KeyboardButton(main_btns.contacts)]
#         # second row
#         second_row = [KeyboardButton(main_btns.catalog), KeyboardButton(main_btns.how_to_order)]
#         # third row
#         third_row = [KeyboardButton(main_btns.guides)]
#         # forth row
#         forth_row = [KeyboardButton(main_btns.discounts),
#                      KeyboardButton(main_btns.discounts), KeyboardButton(main_btns.sales)]
#
#         # gathering rows
#         markup.row(*first_row).row(*second_row).row(*third_row).row(*forth_row)
#
#         return markup
#
#     def gen_contacts_menu(self) -> ReplyKeyboardMarkup:
#         """
#         –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–∏–≤–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /contacts\n
#         :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup
#         """
#         contacts_markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
#
#         # –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
#         contact_btns = self.get_contact_btns
#         # –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
#         main_btns = self.get_main_btns
#
#         # –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
#         second_row = [KeyboardButton(contact_btns.ig), KeyboardButton(contact_btns.tg)]
#
#         # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ —Ç—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
#         contacts_markup.row(*[KeyboardButton(contact_btns.owner)]).row(
#             *second_row).row(*[KeyboardButton(main_btns.back)])
#
#         return contacts_markup
# endregion


class InlineKeyboardConstructor(KeyboardConstructor):
    """
    –í–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ inline —Å—Ç–∏–ª—å
    """

    def __init__(
            self,
            # base tuples
            main_menu_btns: namedtuple,
            contacts_menu_btns: namedtuple,
            catalog_menu_btns: namedtuple,
            plants_menu_btns: namedtuple,
            # btn titles
            main_menu_btns_titles: tuple,
            contacts_menu_btns_titles: tuple,
            catalog_menu_btns_titles: tuple,
            plants_menu_btns_titles: tuple
    ):
        super().__init__(
            main_menu_btns,
            contacts_menu_btns,
            catalog_menu_btns,
            plants_menu_btns,
        )

        # —Å–±–æ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫
        self.__main_menu_btns_class = self.main_menu_btns(*main_menu_btns_titles)  # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.__contacts_menu_btns_class = self.contacts_menu_btns(*contacts_menu_btns_titles)  # –∫–æ–Ω—Ç–∞–∫—Ç—ã
        self.__catalog_menu_btns_class = self.catalog_menu_btns(*catalog_menu_btns_titles)  # –∫–∞—Ç–∞–ª–æ–≥
        self.__plants_menu_btns_class = self.plants_menu_btns(*plants_menu_btns_titles)  # –∫–Ω–æ–ø–∫–∏ –≤
        # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "—Ä–∞—Å—Ç–µ–Ω–∏—è"

    @property
    def get_main_menu_class(self) -> namedtuple:
        """
        –ì–æ—Ç–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        :return: namedtuple
        """
        return self.__main_menu_btns_class

    @property
    def get_contacts_menu_class(self) -> namedtuple:
        """
        –ì–æ—Ç–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
        :return: namedtuple
        """
        return self.__contacts_menu_btns_class

    @property
    def get_catalog_menu_class(self) -> namedtuple:
        """
        –ì–æ—Ç–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª "–ö–∞—Ç–∞–ª–æ–≥"
        :return: namedtuple
        """
        return self.__catalog_menu_btns_class

    @property
    def get_plants_menu_class(self) -> namedtuple:
        """
        –ì–æ—Ç–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª "–†–∞—Å—Ç–µ–Ω–∏—è"
        :return: namedtuple
        """
        return self.__plants_menu_btns_class

    def get_fields(self, named_tuple: namedtuple) -> namedtuple:
        """
        –í—ã–¥–∞–µ—Ç –ø–æ–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ç–µ–∂–µ–π
        :param named_tuple: –ö–æ—Ä—Ç–µ–∂ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        :return: namedtuple
        """
        fields = named_tuple._fields
        Tmp = namedtuple('Tmp', fields)
        return Tmp(*fields)

    # region Main menu
    def gen_main_menu_markup(self) -> InlineKeyboardMarkup:
        """
        –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –º–µ–Ω—é\n
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
        """
        markup = InlineKeyboardMarkup(row_width=3)

        main_btns = self.__main_menu_btns_class
        callback_data = self.get_fields(self.main_menu_btns)

        # first row
        first_row = [
            InlineKeyboardButton(main_btns.about, callback_data=callback_data.about),
        ]
        # second row
        second_row = [
            InlineKeyboardButton(main_btns.catalog, callback_data=callback_data.catalog),
            InlineKeyboardButton(main_btns.how_to_order, callback_data=callback_data.how_to_order),
        ]
        # third row
        third_row = [
            InlineKeyboardButton(main_btns.guides, callback_data=callback_data.guides),
            InlineKeyboardButton(main_btns.soil_recipe, callback_data=callback_data.soil_recipe),
        ]
        # forth row
        forth_row = [
            InlineKeyboardButton(main_btns.discounts, callback_data=callback_data.discounts),
        ]
        # fifth row
        fifth_row = [
            InlineKeyboardButton(main_btns.services, callback_data=callback_data.services),
            InlineKeyboardButton(main_btns.greening, callback_data=callback_data.greening),
        ]
        # sixth row
        sixth_row = [
            InlineKeyboardButton(main_btns.contacts, callback_data=callback_data.contacts),
            InlineKeyboardButton(main_btns.partnership, callback_data=callback_data.partnership),
        ]
        # # seventh row
        # seventh_row = [
        #     InlineKeyboardButton()
        # ]

        markup.row(*first_row).row(*second_row).row(*third_row).row(*forth_row).row(*fifth_row).row(
            *sixth_row
        )
        return markup

    def gen_back_btns_markup(self, back_to: str = None) -> InlineKeyboardMarkup:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'\n
        :param back_to: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, –ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        –æ –∫–æ–ª–ª–±—ç–∫–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤
        :return: InlineKeyboardMarkup
        """
        # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_btns = self.__main_menu_btns_class
        main_cb_data = self.get_fields(self.main_menu_btns)

        #
        if back_to is None:
            return InlineKeyboardMarkup().row(*[InlineKeyboardButton(main_btns.back,
                                                                     callback_data=main_cb_data.in_main_menu)])

        return InlineKeyboardMarkup().row(
            *[InlineKeyboardButton(main_btns.back, callback_data=back_to),
              InlineKeyboardButton(main_btns.in_main_menu, callback_data=main_cb_data.in_main_menu)])
    # endregion

    # region Catalog menu
    def gen_catalog_menu_markup(self) -> InlineKeyboardMarkup:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞\n
        :return: InlineKeyboardMarkup
        """
        markup = InlineKeyboardMarkup()

        catalog_btns = self.__catalog_menu_btns_class
        catalog_cb_data = self.get_fields(self.catalog_menu_btns)

        back_btns = self.gen_back_btns_markup()

        # first row
        first_row = [
            InlineKeyboardButton(catalog_btns.plants, callback_data=catalog_cb_data.plants),
            InlineKeyboardButton(catalog_btns.pots, callback_data=catalog_cb_data.pots),
        ]

        return markup.row(*first_row).row(*[InlineKeyboardButton(
            catalog_btns.soil, callback_data=catalog_cb_data.soil
        )]).row(*back_btns.keyboard[0])

    def gen_list_of_plants(self) -> InlineKeyboardMarkup:
        """
        –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫\n
        –ü–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è\n
        :return: InlineKeyboardMarkup
        """
        markup = InlineKeyboardMarkup()

        plants_btns = self.__plants_menu_btns_class
        plants_cb_data = self.get_fields(self.plants_menu_btns)

        cb_data = self.get_fields(self.main_menu_btns)
        back_btns = self.gen_back_btns_markup(cb_data.catalog)

        first_row = [InlineKeyboardButton(x, callback_data=y) for x, y in zip(plants_btns._fields, plants_cb_data)]

        return markup.row(*first_row).row(*back_btns.keyboard[0])

    # endregion

    # region Contacts menu
    def gen_contacts_menu_markup(self) -> InlineKeyboardMarkup:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–∏–≤–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /contacts\n
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
        """
        markup = InlineKeyboardMarkup()

        # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        main_btns = self.__main_menu_btns_class
        main_cb_data = self.get_fields(self.main_menu_btns)

        # —Ä–∞–∑–¥–µ–ª "–∫–æ–Ω—Ç–∞–∫—Ç—ã"
        contact_btns = self.__contacts_menu_btns_class
        contacts_cb_data = self.get_fields(self.contacts_menu_btns)

        # first row
        first_row = [InlineKeyboardButton(contact_btns.owner, callback_data=contacts_cb_data.owner)]
        # second row
        second_row = [
            InlineKeyboardButton(contact_btns.ig, callback_data=contacts_cb_data.ig),
            InlineKeyboardButton(contact_btns.tg, callback_data=contacts_cb_data.tg)
        ]
        # third row
        third_row = [InlineKeyboardButton(main_btns.back, callback_data=main_cb_data.back)]

        return markup.row(*first_row).row(*second_row).row(*third_row)

    def gen_instagram_btn_markup(self) -> InlineKeyboardMarkup:
        """
        –ö–Ω–æ–ø–∫–∞ –∏–Ω—Å—Ç—ã
        :return: InlineKeyboardMarkup
        """
        cb_data = self.get_fields(self.main_menu_btns)
        back_btns = self.gen_back_btns_markup(cb_data.contacts)

        return InlineKeyboardMarkup().row(*[
            InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                                 url='instagram.com/planterium.moscow')
        ]).row(*back_btns.keyboard[0])

    def gen_telegram_btn_markup(self) -> InlineKeyboardMarkup:
        """
        –ö–Ω–æ–ø–∫–∞ —Ç–µ–ª–µ–≥–∏
        :return: InlineKeyboardMarkup
        """
        cb_data = self.get_fields(self.main_menu_btns)
        back_btns = self.gen_back_btns_markup(cb_data.contacts)

        return InlineKeyboardMarkup().row(*[
            InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!",
                                 url='https://t.me/planteriummoscow')
        ]).row(*back_btns.keyboard[0])

    def gen_owner_btn_markup(self) -> InlineKeyboardMarkup:
        cb_data = self.get_fields(self.main_menu_btns)
        back_btns = self.gen_back_btns_markup(cb_data.contacts)

        return InlineKeyboardMarkup().row(*[
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å",
                                 url='https://t.me/stalmt')
        ]).row(*back_btns.keyboard[0])

    # endregion
