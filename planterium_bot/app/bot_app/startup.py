import logging.handlers

import yaml
import os
import os.path as os_path
from telebot import async_telebot
from .keyboard import InlineKeyboardConstructor


class Startup:
    """
    –ö–ª–∞—Å—Å-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –±–æ—Ç–∞\n
    –°–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ:
    \t- –±–æ—Ç
    \t- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    \t- –∫–æ–Ω—Ç–∞–∫—Ç—ã
    """
    __API_KEY = os.getenv('API_KEY_PLANTERIUM_BOT', "5741189229:AAF9nka1wLsCKLOO81ETXfu1WGG_wyg3NgU")
    bot = async_telebot.AsyncTeleBot(token=__API_KEY)
    path = os.getenv("BOT_CONFIG_YML_PATH", os_path.join(
        "D:\\", "Pycharm", "sobes_projects", "sobes_projects",
        "planterium_app", "planterium_bot", "bot-config.yml"
    ))

    def __init__(self):
        #########################################
        ############# MAIN BTNS #################
        #########################################
        self.main_menu = InlineKeyboardConstructor(
            btns_base=(
                'about',
                ('catalog', 'how_to_order'),
                ('guides', 'soil_recipe'),
                'discounts',
                ('services', 'greening'),
                ('contacts', 'partnership'),
            ),
            btns_titles=(
                "–û Planterium'eü™¥",
                ('–ö–∞—Ç–∞–ª–æ–≥üóíÔ∏è', '–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å‚ùì'),
                ('–ú–∏–Ω–∏-–≥–∞–π–¥—ãüìï', '–†–µ—Ü–µ–ø—Ç—ã –≥—Ä—É–Ω—Ç–∞üìÉ'),
                '–°–∫–∏–¥–∫–∏‚ö°',
                ('–°–ø–∞—Å–µ–Ω–∏–µüöë', '–û–∑–µ–ª–µ–Ω–µ–Ω–∏–µü™¥',),
                ('–ö–æ–Ω—Ç–∞–∫—Ç—ãüì±', '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æü§ù'),
            )
        )  # sss
        self.back = InlineKeyboardConstructor(
            btns_base=('back',),
            btns_titles=('–ù–∞–∑–∞–¥üîô',)
        )
        self.to_main_menu = InlineKeyboardConstructor(
            btns_base=('to_main_menu',),
            btns_titles=('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìí',)
        )
        #########################################

        self.catalog_menu = InlineKeyboardConstructor(
            btns_base=(('plants', 'pots'), 'soil'),
            btns_titles=(('–†–∞—Å—Ç–µ–Ω–∏—èüå∫', '–ì–æ—Ä—à–∫–∏ü™¥'), '–ì—Ä—É–Ω—Çüí∞')
        )
        self.contacts_menu = InlineKeyboardConstructor(
            btns_base=(('ig', 'tg'), 'owner'),
            btns_titles=(('–ó–µ–ª–µ–Ω—ã–π Instagramüå≤', '–ó–µ–ª–µ–Ω—ã–π Telegramüåµ'),
                         '–õ–µ—à–∞, –ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–πüå¥'),
            url1='https://instagram.com/planterium.moscow', url2='https://t.me/planteriummoscow',
            url3='https://t.me/stalmt'
        )
        self.admin_menu = InlineKeyboardConstructor(
            btns_base=(('edit_about', 'edit_catalog'),),
            btns_titles=(("""Edit "–û Planterium'eü™¥""", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥"),)
        )

        ###### EDIT CATALOG MENU ######
        self.edit_plants_menu = InlineKeyboardConstructor(
            btns_base=((),),
            btns_titles=((),)
        )

    def get_plants_for_keyboard(self):
        # TODO: —Ä–µ–∞–ª–∏–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.edit_plants_menu
        pass

    @classmethod
    def get_config(cls) -> {}:
        try:
            file = open(cls.path, 'r')
        except FileNotFoundError as err:
            print(err)
            exit(1)
        else:
            with file as config:
                return yaml.safe_load(config)

    @classmethod
    def set_config(cls, data: dict):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥
        :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
        :return: None
        """
        try:
            file = open(cls.path, 'w')
            old_file = open(cls.path, 'r')
        except FileNotFoundError as err:
            print(err)
            return False
        else:
            with file as f, old_file as old_f:
                # TODO: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —á–µ—Ä—Ç–æ–≤–æ–π –ö–û–î–ò–†–û–í–ö–û–ô!!!!1111111

                old_data = yaml.safe_load(old_f)
                new_data = old_data.get('settings')
                new_data.update(data)
                yaml.dump(stream=f, data=new_data, sort_keys=False, default_flow_style=False, encoding='cp1252')
                return True


bot_base = Startup()
bot = bot_base.bot
