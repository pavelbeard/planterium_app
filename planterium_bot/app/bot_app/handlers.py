import json

from telebot.types import CallbackQuery
from aiohttp import client
from .startup import Startup


def welcome_msg(**kwargs) -> str:
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: str
    """
    fname = kwargs.get('first_name')
    lname = " " + kwargs.get('last_name') if kwargs.get('last_name') is not None else ""
    return f"–ü—Ä–∏–≤–µ—Ç {fname}{lname}, –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Planterium!\n–î–∞–≤–∞–π –ø–æ–º–æ–≥—É —Ç–µ–±–µüòâ\n" \
           f"–°–¥–µ–ª–∞—é —Ç–≤–æ—é –∂–∏–∑–Ω—å —á—É—Ç–æ—á–∫—É –∑–µ–ª–µ–Ω–µ–µüôÉ"


async def main_menu_handler(bot_base: Startup, call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n
    :param bot_base: –ò–Ω—Å—Ç–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    :param call: –æ—á–µ—Ä–µ–¥—å –∫–æ–ª–ª–±—ç–∫–æ–≤
    """

    match call.data:
        case 'about':
            pass
        case 'catalog':
            pass
        case 'how_to_order':
            pass
        case 'guides':
            pass
        case 'soil_recipe':
            pass
        case 'discounts':
            pass
        case 'service':
            pass
        case 'greening':
            pass
        case 'contacts':
            await bot_base.bot.edit_message_text(
                text='–ö–æ–Ω—Ç–∞–∫—Ç—ãüì±', chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=bot_base.contacts_menu.assemble_keyboard().row(
                    *bot_base.back.assemble_keyboard().keyboard[0]))
        case 'partnership':
            pass


async def admin_menu_handler(bot_base: Startup, call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n
    :param bot_base: –ò–Ω—Å—Ç–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
    :param call: –æ—á–µ—Ä–µ–¥—å –∫–æ–ª–ª–±—ç–∫–æ–≤.
    """
    match call.data:
        case 'back':
            await bot_base.bot



async def lvl_one_menu_handler(bot_base: Startup, call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: "–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ", "–∫–æ–Ω—Ç–∞–∫—Ç—ã"\n
    :param bot_base: –ò–Ω—Å—Ç–∞–Ω—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
    :param call: –æ—á–µ—Ä–µ–¥—å –∫–æ–ª–ª–±—ç–∫–æ–≤.
    """
    match call.data:
        case 'back':
            # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await bot_base.bot.edit_message_text(welcome_msg(
                    first_name=call.message.chat.first_name, last_name=call.message.chat.last_name),
                chat_id=call.message.chat.id, message_id=call.message.message_id,
                reply_markup=bot_base.main_menu.assemble_keyboard()
            )


async def request_to_check_admin(user_id: int) -> bool:
    """
    –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :param user_id: ID —é–∑–µ—Ä–∞ - –∫–ª—é—á –∫ –∞–¥–º–∏–Ω–∫–µ
    :return: True - –µ—Å–ª–∏ id –µ—Å—Ç—å –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –∏–Ω–∞—á–µ False
    """
    url = Startup.get_config().get('settings').get('api_url') + "/api/check_admin"
    headers = {"Content-Type": "application/json;charset=utf8"}
    user_data = json.dumps({"user_id": str(user_id)})

    async with client.ClientSession() as session:
        async with session.post(url=url, headers=headers, data=user_data) as response:
            data = await response.json()
            return data.get('check_admin')
